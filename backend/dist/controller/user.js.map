{"version":3,"sources":["../../src/controller/user.js"],"names":["config","db","api","post","authenticate","req","res","newUser","User","username","body","email","phonenumber","profilepicurlicUrl","profilepicurl","save","err","status","json","message","get","find","users","findById","params","id","user","put","name","avatarName","avatarColor","findOne","exec","userData","delete","remove","_id"],"mappings":"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","file":"user.js","sourcesContent":["import mongoose from 'mongoose';\nimport { Router } from 'express';\nimport bodyParser from 'body-parser';\nimport User from '../model/user';\n\nimport { authenticate } from '../middleware/authMiddleware';\n\nexport default({ config, db }) => {\n  let api = Router();\n\n  // '/v1/user/add' - Create\n  api.post('/add', authenticate, (req, res) => {\n    let newUser = new User();\n    newUser.username = req.body.username;\n    newUser.email = req.body.email;\n    newUser.phonenumber = req.body.phonenumber;\n    newUser.profilepicurlicUrl = req.body.profilepicurl;\n\n    newUser.save(err => {\n      if (err) {\n        res.status(500).json({ message: err });\n        return;\n      }\n      res.status(200).json(newUser);\n    });\n  });\n\n  // '/v1/user/' - Read\n  api.get('/', authenticate, (req, res) => {\n    User.find({}, (err, users) => {\n      if (err) {\n        res.status(500).json({ message: err });\n        return;\n      }\n      res.status(200).json(users);\n    });\n  });\n\n  // '/v1/user/:id' - Read 1\n  api.get('/:id', authenticate, (req, res) => {\n    User.findById(req.params.id, (err, user) => {\n      if (err) {\n        res.status(500).json({ message: err });\n        return;\n      }\n      res.status(200).json(user);\n    });\n  });\n\n  // '/v1/user/:id' - Update\n  api.put('/:id', authenticate, (req, res) => {\n    User.findById(req.params.id, (err, user) => {\n      if (err) {\n        res.status(500).json({ message: err });\n      }\n      user.name = req.body.name;\n      user.email = req.body.email;\n      user.avatarName = req.body.avatarName;\n      user.avatarColor = req.body.avatarColor;\n      user.save(err => {\n        if (err) {\n          res.status(500).json({ message: err });\n          return;\n        }\n        res.status(200).json({ message: 'User info updated' });\n      });\n    });\n  });\n\n  // 'v1/user/byEmail/:email'\n  api.get('/byEmail/:email', authenticate, (req, res) => {\n    User\n      .findOne({ 'email': req.params.email })\n      .exec((err, userData) => {\n        if (err) {\n          res.status(500).json({ message: err });\n          return;\n        }\n        res.status(200).json(userData);\n      });\n  });\n\n  //'v1/user/byId/:id'\n  api.get('/byId/:id', authenticate, (req, res) => {\n    User.findById(req.params.id, (err, user) => {\n      if (err) {\n        res.status(500).json({message: `An error has occured ${err. message}`});\n        return;\n      }\n          res.status(200).json(user);\n    })\n  })\n\n  // '/vq/user/:id' -Delete\n  api.delete('/:id', authenticate, (req, res) => {\n    User.remove({\n      _id: req.params.id\n    }, (err, user) => {\n      if (err) {\n        res.status(500).json({ message: err });\n        return;\n      }\n      res.status(200).json({ message: 'User Successfully Removed'});\n    });\n  });\n\n  // '/v1/user/' - Delete all\n  api.delete('/', authenticate, (req, res) => {\n    User.find({}, (err, users) => {\n      if (err) {\n        res.status(500).json({ message: err });\n        return;\n      }\n      res.status(200).json({ message: 'All Users Removed'});\n    });\n  });\n\n  return api;\n}\n"]}